<?php

use Symfony\Component\Routing\RequestContext;
use Symfony\Component\Routing\Exception\RouteNotFoundException;
use Psr\Log\LoggerInterface;

/**
 * UrlGeneratore64cae6c6bf9a24317713c1bfad1e79e09d89e57
 *
 * This class has been auto-generated
 * by the Symfony Routing Component.
 */
class UrlGeneratore64cae6c6bf9a24317713c1bfad1e79e09d89e57 extends Pagekit\Routing\Generator\UrlGenerator
{
    private static $declaredRoutes = array(
        '@system/cache/clear' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Pagekit\\Cache\\Controller\\CacheController::clearAction',    '_request' =>     array (      'value' =>       array (        'caches' => 'array',      ),      'csrf' => true,    ),  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/system/cache/clear',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '@system/intl' => array (  0 =>   array (    0 => 'locale',  ),  1 =>   array (    '_maintenance' => true,    '_controller' => 'Pagekit\\Intl\\Controller\\IntlController::indexAction',    '_request' =>     array (      'value' =>       array (        0 => 'locale',      ),    ),  ),  2 =>   array (    'locale' => '[a-zA-Z0-9_-]+',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[a-zA-Z0-9_-]+',      3 => 'locale',    ),    1 =>     array (      0 => 'text',      1 => '/system/intl',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '@system/package/themes' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Pagekit\\Installer\\Controller\\PackageController::themesAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/system/package/themes',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '@system/package/extensions' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Pagekit\\Installer\\Controller\\PackageController::extensionsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/system/package/extensions',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '@system/package/enable' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Pagekit\\Installer\\Controller\\PackageController::enableAction',    '_request' =>     array (      'value' =>       array (        0 => 'name',      ),      'csrf' => true,    ),  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/system/package/enable',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '@system/package/disable' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Pagekit\\Installer\\Controller\\PackageController::disableAction',    '_request' =>     array (      'value' =>       array (        0 => 'name',      ),      'csrf' => true,    ),  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/system/package/disable',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '@system/package/upload' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Pagekit\\Installer\\Controller\\PackageController::uploadAction',    '_request' =>     array (      'value' =>       array (        'type' => 'string',      ),      'csrf' => true,    ),  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/system/package/upload',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '@system/package/install' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Pagekit\\Installer\\Controller\\PackageController::installAction',    '_request' =>     array (      'value' =>       array (        'package' => 'array',        'packagist' => 'boolean',      ),      'csrf' => true,    ),  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/system/package/install',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '@system/package/uninstall' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Pagekit\\Installer\\Controller\\PackageController::uninstallAction',    '_request' =>     array (      'value' =>       array (        0 => 'name',      ),      'csrf' => true,    ),  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/system/package/uninstall',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '@system/marketplace/themes' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Pagekit\\Installer\\Controller\\MarketplaceController::themesAction',    '_request' =>     array (      'value' =>       array (        'page' => 'int',      ),    ),  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/system/marketplace/themes',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '@system/marketplace/extensions' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Pagekit\\Installer\\Controller\\MarketplaceController::extensionsAction',    '_request' =>     array (      'value' =>       array (        'page' => 'int',      ),    ),  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/system/marketplace/extensions',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '@system/update' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Pagekit\\Installer\\Controller\\UpdateController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/system/update',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '@system/update/download' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Pagekit\\Installer\\Controller\\UpdateController::downloadAction',    '_request' =>     array (      'value' =>       array (        'url' => 'string',      ),      'csrf' => true,    ),  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/system/update/download',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '@system/update/update' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Pagekit\\Installer\\Controller\\UpdateController::updateAction',    '_request' =>     array (      'csrf' => true,    ),  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/system/update/update',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '@installer' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Pagekit\\Installer\\Controller\\InstallerController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/installer',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '@installer/check' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Pagekit\\Installer\\Controller\\InstallerController::checkAction',    '_request' =>     array (      'value' =>       array (        'config' => 'array',      ),    ),  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/installer/check',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '@installer/install' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Pagekit\\Installer\\Controller\\InstallerController::installAction',    '_request' =>     array (      'value' =>       array (        'config' => 'array',        'option' => 'array',        'user' => 'array',      ),    ),  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/installer/install',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
    );

    /**
     * Constructor.
     */
    public function __construct(RequestContext $context, LoggerInterface $logger = null)
    {
        $this->context = $context;
        $this->logger = $logger;
    }

    public function generate($name, $parameters = [], $referenceType = self::ABSOLUTE_PATH)
    {
        if (!isset(self::$declaredRoutes[$name])) {
            throw new RouteNotFoundException(sprintf('Unable to generate a URL for the named route "%s" as such route does not exist.', $name));
        }

        list($variables, $defaults, $requirements, $tokens, $hostTokens, $requiredSchemes) = self::$declaredRoutes[$name];

        return $this->doGenerate($variables, $defaults, $requirements, $tokens, $parameters, $name, $referenceType, $hostTokens, $requiredSchemes);
    }

    public function getRouteProperties($name)
    {
        if (isset(self::$declaredRoutes[$name])) {
            return self::$declaredRoutes[$name];
        }
    }
}
