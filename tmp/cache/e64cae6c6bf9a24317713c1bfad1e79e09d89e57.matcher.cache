<?php

use Symfony\Component\Routing\Exception\MethodNotAllowedException;
use Symfony\Component\Routing\Exception\ResourceNotFoundException;
use Symfony\Component\Routing\RequestContext;

/**
 * UrlMatchere64cae6c6bf9a24317713c1bfad1e79e09d89e57.
 *
 * This class has been auto-generated
 * by the Symfony Routing Component.
 */
class UrlMatchere64cae6c6bf9a24317713c1bfad1e79e09d89e57 extends Symfony\Component\Routing\Matcher\UrlMatcher
{
    /**
     * Constructor.
     */
    public function __construct(RequestContext $context)
    {
        $this->context = $context;
    }

    public function match($pathinfo)
    {
        $allow = array();
        $pathinfo = rawurldecode($pathinfo);
        $context = $this->context;
        $request = $this->request;

        if (0 === strpos($pathinfo, '/system')) {
            // @system/cache/clear
            if ($pathinfo === '/system/cache/clear') {
                return array (  '_controller' => 'Pagekit\\Cache\\Controller\\CacheController::clearAction',  '_request' =>   array (    'value' =>     array (      'caches' => 'array',    ),    'csrf' => true,  ),  '_route' => '@system/cache/clear',);
            }

            // @system/intl
            if (0 === strpos($pathinfo, '/system/intl') && preg_match('#^/system/intl/(?P<locale>[a-zA-Z0-9_-]+)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => '@system/intl')), array (  '_maintenance' => true,  '_controller' => 'Pagekit\\Intl\\Controller\\IntlController::indexAction',  '_request' =>   array (    'value' =>     array (      0 => 'locale',    ),  ),));
            }

            if (0 === strpos($pathinfo, '/system/package')) {
                // @system/package/themes
                if ($pathinfo === '/system/package/themes') {
                    return array (  '_controller' => 'Pagekit\\Installer\\Controller\\PackageController::themesAction',  '_route' => '@system/package/themes',);
                }

                if (0 === strpos($pathinfo, '/system/package/e')) {
                    // @system/package/extensions
                    if ($pathinfo === '/system/package/extensions') {
                        return array (  '_controller' => 'Pagekit\\Installer\\Controller\\PackageController::extensionsAction',  '_route' => '@system/package/extensions',);
                    }

                    // @system/package/enable
                    if ($pathinfo === '/system/package/enable') {
                        return array (  '_controller' => 'Pagekit\\Installer\\Controller\\PackageController::enableAction',  '_request' =>   array (    'value' =>     array (      0 => 'name',    ),    'csrf' => true,  ),  '_route' => '@system/package/enable',);
                    }

                }

                // @system/package/disable
                if ($pathinfo === '/system/package/disable') {
                    return array (  '_controller' => 'Pagekit\\Installer\\Controller\\PackageController::disableAction',  '_request' =>   array (    'value' =>     array (      0 => 'name',    ),    'csrf' => true,  ),  '_route' => '@system/package/disable',);
                }

                // @system/package/upload
                if ($pathinfo === '/system/package/upload') {
                    return array (  '_controller' => 'Pagekit\\Installer\\Controller\\PackageController::uploadAction',  '_request' =>   array (    'value' =>     array (      'type' => 'string',    ),    'csrf' => true,  ),  '_route' => '@system/package/upload',);
                }

                // @system/package/install
                if ($pathinfo === '/system/package/install') {
                    return array (  '_controller' => 'Pagekit\\Installer\\Controller\\PackageController::installAction',  '_request' =>   array (    'value' =>     array (      'package' => 'array',      'packagist' => 'boolean',    ),    'csrf' => true,  ),  '_route' => '@system/package/install',);
                }

                // @system/package/uninstall
                if ($pathinfo === '/system/package/uninstall') {
                    return array (  '_controller' => 'Pagekit\\Installer\\Controller\\PackageController::uninstallAction',  '_request' =>   array (    'value' =>     array (      0 => 'name',    ),    'csrf' => true,  ),  '_route' => '@system/package/uninstall',);
                }

            }

            if (0 === strpos($pathinfo, '/system/marketplace')) {
                // @system/marketplace/themes
                if ($pathinfo === '/system/marketplace/themes') {
                    return array (  '_controller' => 'Pagekit\\Installer\\Controller\\MarketplaceController::themesAction',  '_request' =>   array (    'value' =>     array (      'page' => 'int',    ),  ),  '_route' => '@system/marketplace/themes',);
                }

                // @system/marketplace/extensions
                if ($pathinfo === '/system/marketplace/extensions') {
                    return array (  '_controller' => 'Pagekit\\Installer\\Controller\\MarketplaceController::extensionsAction',  '_request' =>   array (    'value' =>     array (      'page' => 'int',    ),  ),  '_route' => '@system/marketplace/extensions',);
                }

            }

            if (0 === strpos($pathinfo, '/system/update')) {
                // @system/update
                if ($pathinfo === '/system/update') {
                    return array (  '_controller' => 'Pagekit\\Installer\\Controller\\UpdateController::indexAction',  '_route' => '@system/update',);
                }

                // @system/update/download
                if ($pathinfo === '/system/update/download') {
                    return array (  '_controller' => 'Pagekit\\Installer\\Controller\\UpdateController::downloadAction',  '_request' =>   array (    'value' =>     array (      'url' => 'string',    ),    'csrf' => true,  ),  '_route' => '@system/update/download',);
                }

                // @system/update/update
                if ($pathinfo === '/system/update/update') {
                    return array (  '_controller' => 'Pagekit\\Installer\\Controller\\UpdateController::updateAction',  '_request' =>   array (    'csrf' => true,  ),  '_route' => '@system/update/update',);
                }

            }

        }

        if (0 === strpos($pathinfo, '/installer')) {
            // @installer
            if ($pathinfo === '/installer') {
                return array (  '_controller' => 'Pagekit\\Installer\\Controller\\InstallerController::indexAction',  '_route' => '@installer',);
            }

            // @installer/check
            if ($pathinfo === '/installer/check') {
                return array (  '_controller' => 'Pagekit\\Installer\\Controller\\InstallerController::checkAction',  '_request' =>   array (    'value' =>     array (      'config' => 'array',    ),  ),  '_route' => '@installer/check',);
            }

            // @installer/install
            if ($pathinfo === '/installer/install') {
                return array (  '_controller' => 'Pagekit\\Installer\\Controller\\InstallerController::installAction',  '_request' =>   array (    'value' =>     array (      'config' => 'array',      'option' => 'array',      'user' => 'array',    ),  ),  '_route' => '@installer/install',);
            }

        }

        throw 0 < count($allow) ? new MethodNotAllowedException(array_unique($allow)) : new ResourceNotFoundException();
    }
}
